<script cml-type="interface">
type callback = (res: CMLObject) => void
interface RecorderManagerInterface {
  getRecorderManager(): CMLObject;
}
</script>

<script cml-type="web">
import cml from "chameleon-api"
import EventEmitter from 'events'
import RecordRTC from 'recordrtc'
import getBlobDuration from 'get-blob-duration'

class Method implements RecorderManagerInterface {
  getRecorderManager() {
    let recordContext = {};
    let events = new EventEmitter();

    let recordInstance = Promise.resolve().then(() => {

    return navigator.mediaDevices.getUserMedia({
      audio: true
    }).then(stream => {
      let recorder = new RecordRTC(stream, {
        type: 'audio'
      });
      return recorder
    })
    }).catch(err => {
      //创建失败
      events.emit('onError');
      console.log(err)
    });

//以下方法都放在recordInstance.then的回调中，保证是在创建音频成功的情况下执行；
    //播放功能
    recordContext.start = function(options) {
      recordInstance.then(recorder => {
        let duration = options.duration || 60000
        let format = options.format || 'mp3'
        recorder.startRecording()
        events.emit('onStart');
      })
    }
      
    recordContext.stop = function() {
      recordInstance.then(recorder => {
        recorder.stopRecording(() => {
          let blob = recorder.getBlob();
          getBlobDuration(blob).then(function(duration) {
            console.log(duration*1000);
            events.emit('onStop', {
              tempFilePath: URL.createObjectURL(blob),
              duration: duration*1000,
              fileSize: blob.size
            });
          });
        });
      })
    }

    let onRecordEvents = ['onError', 'onFrameRecorded', 'onInterruptionBegin', 'onInterruptionEnd', 'onPause', 'onResume', 'onStart', 'onStop'];
    onRecordEvents.forEach((item) => {
      recordContext[item] = function(callback) {
        events.addListener(item, callback); //同步注册方法
      }
    });
    let offRecordEvents = ['offError', 'offFrameRecorded', 'offInterruptionBegin', 'offInterruptionEnd', 'offPause', 'offResume', 'offStart', 'offStop'];
    offRecordEvents.forEach((item) => {
      recordContext[item] = function(callback) {
        events.removeAllListeners(item); //同步注册方法
      }
    });

      return recordContext;
  }
}

export default new Method();
</script>

<script cml-type="weex">
import cmlBridge from 'chameleon-bridge';
import * as weexRecorder from './weex-recorder.js';
import cml from "chameleon-api";
import consoleLog from '../consoleLog/index.js';
//设计思路，在createCb里面绑定事件，用于play pause setSrc，然后再执行这些方法的时候去触发对应的事件；
//play的时候设置定时器获取播放进度；pause  stop destroy 的时候需要清除定时器
import EventEmitter from 'events'
class Method implements RecorderManagerInterface {
  getRecorderManager() {
    let recordContext = {};
    let timer = null;
    let events = new EventEmitter();
    //获取音频播放的当前时间
    // let startInterval = function() {
    //   timer = setInterval(() => { //摧毁的时候需要关掉轮询
    //     console.log('interval')
    //     recordInstance.then((res) => {
    //       weexAudio.getWeexAudioCurrentPos({
    //         id: res.data.id
    //       }, function(currentPosRes) {
    //         recordContext.currentTime = currentPosRes.data && currentPosRes.data.msec / 1000;
    //         recordContext.duration = res.data && res.data.duration / 1000
    //         events.emit('onTimeUpdate');
    //       })
    //     })
    //   }, 500);
    // }
    consoleLog("getRecorderManager")
    let recordInstance = Promise.resolve().then(() => {
      // let looping = recordContext.loop ? '1' : '0';
      // // let volume = recordContext.volume == 1 ? 1.0 : parseFloat(recordContext.volume);
      // let volume = 1.0;
      // if (recordContext.volume == 0) {
      //   volume = 0;
      // } else { //未定义volumn 则默认值为1.0;
      //   volume = parseFloat(recordContext.volume || 1.0)
      // }
      return weexRecorder.createWeexRecord().then((res) => {
        //recordContext.id = res.data.id;
        consoleLog('create-recorder')
        
        return res;
      });
    }).catch((res) => {
      //创建失败
      events.emit('onError');
      console.log(res.msg)
    });
    //以下方法都放在recordInstance.then的回调中，保证是在创建音频成功的情况下执行；
    //播放功能
    recordContext.start = function(options) {
      recordInstance.then((res) => {
        weexRecorder.startWeexRecord(options, (res) => {
          consoleLog('onStart')
          consoleLog(JSON.stringify(res))
          events.emit('onStart');
        })
      })
    }
    //暂停功能
    recordContext.pause = function() {
      recordInstance.then((res) => {
        weexRecorder.pauseWeexRecord((res) => {
          consoleLog(JSON.stringify(res))
          events.emit('onPause');
        })
      });
    }
    //暂停功能，下次播放将重新播放；
    recordContext.stop = function() {
      recordInstance.then((res) => {
        consoleLog('before stopWeexRecord')
        weexRecorder.stopWeexRecord((res) => {
          consoleLog('onStop')
          consoleLog(JSON.stringify(res))
          consoleLog(res.data.path)
          consoleLog('11')
          events.emit('onStop', {
            tempFilePath: res.data.path
          });
        })
      })
    }
    //摧毁音频
    recordContext.destroy = function() {
      clearInterval(timer);
      recordInstance.then((res) => {
        weexAudio.destroyAudio({
          id: res.data.id
        }, () => {})
      })
    }

    let onRecordEvents = ['onError', 'onFrameRecorded', 'onInterruptionBegin', 'onInterruptionEnd', 'onPause', 'onResume', 'onStart', 'onStop'];
    onRecordEvents.forEach((item) => {
      recordContext[item] = function(callback) {
        events.addListener(item, callback); //同步注册方法
      }
    });
    let offRecordEvents = ['offError', 'offFrameRecorded', 'offInterruptionBegin', 'offInterruptionEnd', 'offPause', 'offResume', 'offStart', 'offStop'];
    offRecordEvents.forEach((item) => {
      recordContext[item] = function(callback) {
        events.removeAllListeners(item); //同步注册方法
      }
    });


    return recordContext;
  }
}

export default new Method();
</script>

<script cml-type="wx">
class Method implements RecorderManagerInterface {
  getRecorderManager() {
    return wx.getRecorderManager();
  }
}

export default new Method();
</script>

<script cml-type="qq">
class Method implements RecorderManagerInterface {
  getRecorderManager() {
    return qq.getRecorderManager();
  }
}

export default new Method();
</script>

<script cml-type="alipay">
class Method implements RecorderManagerInterface {
  getRecorderManager() {
    return alipay.getRecorderManager();
  }
}

export default new Method();
</script>

<script cml-type="baidu">
class Method implements RecorderManagerInterface {
  getRecorderManager() {
    return baidu.getRecorderManager();
  }
}

export default new Method();
</script>

<script cml-type="tt">
class Method implements RecorderManagerInterface {
  getRecorderManager() {
    return baidu.getRecorderManager();
  }
}

export default new Method();
</script>